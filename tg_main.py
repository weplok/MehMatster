import asyncio
import logging
import pprint
import ast
from functions.db_funcs import create_user, get_user
from functions.schedule import get_groups, get_schedule, get_teachers, get_teacher_schedule
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.exceptions import TelegramAPIError
from parsing import student_get_news, student_get_news_mehmat, bachalor_applicant_count_free_places, bachalor_applicant_count_paid_places, bachalor_applicant_pass_balls, master_applicant_count_free_places, master_applicant_count_paid_places, master_applicant_pass_balls


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = '7310603202:AAGC1StqzHRenL-w8ouhneno3G5FRHfl6vM'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –≤–º–µ—Å—Ç–æ –ë–î)
user_data = {}

student_news = student_get_news()
student_news_mehmath = student_get_news_mehmat()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç)
role_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç")],
        [KeyboardButton(text="–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ (—Å—Ç—É–¥–µ–Ω—Ç)
course_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 1 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 2 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 3 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 4 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 5 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, 1 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, 2 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞, 1 –∫—É—Ä—Å")],
        [KeyboardButton(text="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞, 2 –∫—É—Ä—Å")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –±—é–¥–∂–µ—Ç–∞
infrastructure_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–±—â–∞–≥–∞", callback_data="inf_dorm")],
        [InlineKeyboardButton(text="–ö–∞–º–ø—É—Å", callback_data="inf_campus")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—É—á–∏—Ç–µ–ª—å)
direction_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –º–µ—Ö–∞–Ω–∏–∫–∞ –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="direction_math")],
        [InlineKeyboardButton(text="–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data="direction_infmath")],
        [InlineKeyboardButton(text="–§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", callback_data="direction_inf")],
        [InlineKeyboardButton(text="–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –ü—Ä–æ—Ñ–∏–ª—å ¬´–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞¬ª", callback_data="direction_ped")]
    ]
)

teacher_direction_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ö–∞—Ñ–µ–¥—Ä—ã")],
        [KeyboardButton(text="–ë–∞–∫–∞–ª–∞–≤—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
        [KeyboardButton(text="–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")],
    ],
    resize_keyboard=True
)

choice_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="choice_yes")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="choice_no")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç–∞
ivt_subcategory_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è", callback_data="ivt_conditions")],
        [InlineKeyboardButton(text="–§–∏–Ω–∞–Ω—Å—ã", callback_data="ivt_finance")],
        [InlineKeyboardButton(text="–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞", callback_data="ivt_infrastructure")]
    ]
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="–°–æ–±—ã—Ç–∏–µ")],
        [KeyboardButton(text="–ò–Ω—Ñ–∞ –ø—Ä–æ –ø—Ä–µ–ø–æ–¥–∞"), KeyboardButton(text="–ù–∞–≤–∏–≥–∞—Ü–∏—è")],
        [KeyboardButton(text="–£—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def format_schedule(schedule):
    days_dict = {
        "0": "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "1": "–í—Ç–æ—Ä–Ω–∏–∫",
        "2": "–°—Ä–µ–¥–∞",
        "3": "–ß–µ—Ç–≤–µ—Ä–≥",
        "4": "–ü—è—Ç–Ω–∏—Ü–∞",
        "5": "–°—É–±–±–æ—Ç–∞",
        "6": "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
    }
    result = []
    for day, lessons in schedule.items():
        result.append(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {days_dict[day]}")
        for lesson in lessons:
            result.append(
                f"  üïí –í—Ä–µ–º—è: {lesson['start_time']} - {lesson['end_time']}\n"
                f"  üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['title']}\n"
                f"  üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
                f"  üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
            )
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π
    return "\n".join(result)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def get_inline_keyboard(choice: str):
    if choice == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data="schedule_today")],
            [InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data="schedule_tomorrow")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data="schedule_atomorrow")],
            [InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data="schedule_week")]
        ])
    elif choice == "–°–æ–±—ã—Ç–∏–µ":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Æ–§–£", callback_data="news_last")],
            [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ú–µ—Ö–º–∞—Ç–∞", callback_data="news_last_mehmath")],
            [InlineKeyboardButton(text="–ü—Ä–µ—Å—Å-–¶–µ–Ω—Ç—Ä –Æ–§–£", callback_data="news_vk_url")]
        ])
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (—Å—Ç—É–¥–µ–Ω—Ç)
def get_group_keyboard(course):
    try:
        groups = get_groups(course)  # –ü—Ä–∏–º–µ—Ä –≥—Ä—É–ø–ø
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=group)] for group in groups],
            resize_keyboard=True
        )
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø: {e}")
        return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
def get_teacher_keyboard(name):
    try:
        teachers = get_teachers(name)  # –ü—Ä–∏–º–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=teacher)] for teacher in teachers],
            resize_keyboard=True
        )
        return keyboard
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: {e}")
        return ReplyKeyboardMarkup(keyboard=[], resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start, –°—Ç–∞—Ä—Ç, –ù–∞—á–∞—Ç—å
@dp.message(Command("start"))
@dp.message(lambda message: message.text.lower() in ["—Å—Ç–∞—Ä—Ç", "–Ω–∞—á–∞—Ç—å"])
async def cmd_start(message: types.Message):
    try:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=role_keyboard)
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /menu, –ú–µ–Ω—é
@dp.message(Command("menu"))
@dp.message(lambda message: message.text.lower() in ["–º–µ–Ω—é", "menu"])
async def cmd_menu(message: types.Message):
    try:
        user_id = message.from_user.id
        user = get_user("tg", user_id)
        if user is None:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user["is_abitur"] == 1:
            await message.answer("–ú–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º:", reply_markup=teacher_direction_keyboard)
        else:
            await message.answer("–ú–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏:", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–µ–Ω—é: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç)
@dp.message(lambda message: message.text in ["–°—Ç—É–¥–µ–Ω—Ç", "–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç"])
async def process_role(message: types.Message):
    try:
        user_id = message.from_user.id
        role = message.text.lower()
        if role == "—Å—Ç—É–¥–µ–Ω—Ç":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
            user_data[user_id] = {"role": "student", "step": "waiting_for_name"}
        elif role == "–∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç":
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
            user_data[user_id] = {"role": "abiturient", "step": "waiting_for_name"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–æ–ª–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "waiting_for_name")
async def process_name(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data[user_id]["name"] = message.text

        if user_data[user_id]["role"] == "abiturient":
            create_user(db_code="tg", uid=user_id, name=message.text, course=None, group=None)
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç. –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–∞?", reply_markup=choice_keyboard)
        elif user_data[user_id]["role"] == "student":
            user_data[user_id]["step"] = "waiting_for_course"
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:", reply_markup=course_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ (—Å—Ç—É–¥–µ–Ω—Ç)
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "waiting_for_course")
async def process_course(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data[user_id]["course"] = message.text
        user_data[user_id]["step"] = "waiting_for_group"
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:", reply_markup=get_group_keyboard(message.text))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (—Å—Ç—É–¥–µ–Ω—Ç)
@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "waiting_for_group")
async def process_group(message: types.Message):
    try:
        user_id = message.from_user.id
        user_data[user_id]["group"] = message.text
        create_user(db_code="tg", uid=user_id, name=user_data[user_id]["name"], course=user_data[user_id]["course"], group=user_data[user_id]["group"])
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã —Å—Ç—É–¥–µ–Ω—Ç. –í—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–∞?", reply_markup=choice_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query(lambda callback: callback.data.startswith("choice"))
async def process_re_registration(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        if callback.data == "choice_yes":
            await callback.message.answer("–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=role_keyboard)
        elif callback.data == "choice_no":
            user = get_user("tg", user_id)
            if user["is_abitur"] == 1:
                await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup=teacher_direction_keyboard)
            else:
                await callback.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup=main_keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.callback_query(lambda callback: callback.data.startswith("direction"))
async def process_direction(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {callback.data}")
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=ivt_subcategory_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–ú–ò
@dp.callback_query(lambda callback: callback.data.startswith("ivt_"))
async def process_pmi_subcategory(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –ü–ú–ò: {callback.data}")
        if callback.data == "ivt_conditions":
            await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å–ª–æ–≤–∏—è—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:")
        elif callback.data == "ivt_finance":
            await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–∏...")
        elif callback.data == "ivt_infrastructure":
            await callback.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ:", reply_markup=infrastructure_keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–ú–ò: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('schedule_'))
async def process_sch_subchoice(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        person = get_user("tg", user_id)
        subchoice = callback_query.data
        await callback_query.answer()
        if subchoice == "schedule_today":
            schedule_text = f"{get_schedule(person['course'], person['group'], 'today')}"
            start_index = schedule_text.find("{")
            end_index = schedule_text.rfind("}") + 1
            schedule_data = ast.literal_eval(schedule_text[start_index:end_index])
            await callback_query.message.answer(f"{format_schedule(schedule_data)}")
        elif subchoice == "schedule_tomorrow":
            schedule_text = f"{get_schedule(person['course'], person['group'], 'tomorrow')}"
            start_index = schedule_text.find("{")
            end_index = schedule_text.rfind("}") + 1
            schedule_data = ast.literal_eval(schedule_text[start_index:end_index])
            await callback_query.message.answer(f"{format_schedule(schedule_data)}")
        elif subchoice == "schedule_week":
            schedule_text = f"{get_schedule(person['course'], person['group'], 'week')}"
            start_index = schedule_text.find("{")
            end_index = schedule_text.rfind("}") + 1
            schedule_data = ast.literal_eval(schedule_text[start_index:end_index])
            await callback_query.message.answer(f"{format_schedule(schedule_data)}")
        elif subchoice == "schedule_atomorrow":
            schedule_text = f"{get_schedule(person['course'], person['group'], 'atomorrow')}"
            start_index = schedule_text.find("{")
            end_index = schedule_text.rfind("}") + 1
            schedule_data = ast.literal_eval(schedule_text[start_index:end_index])
            await callback_query.message.answer(f"{format_schedule(schedule_data)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await callback_query.message.answer("–í—ã—Ö–æ–¥–Ω–æ–π")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith('places_'))
async def process_news_subchoice(callback_query: types.CallbackQuery):
    try:
        subchoice = callback_query.data
        await callback_query.answer()
        if subchoice == "places_paid":
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö...")
        elif subchoice == "places_budget":
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö...")
        elif subchoice == "places_score":
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ö–æ–¥–Ω—ã—Ö –±–∞–ª–ª–∞—Ö...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±—é–¥–∂–µ—Ç–∞: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
@dp.callback_query(lambda c: c.data.startswith('inf_'))
async def process_news_subchoice(callback_query: types.CallbackQuery):
    try:
        subchoice = callback_query.data
        await callback_query.answer()
        if subchoice == "inf_dorm":
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±—â–∞–≥–µ...")
        elif subchoice == "inf_campus":
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–º–ø—É—Å–µ...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data.startswith('news_'))
async def process_news_subchoice(callback_query: types.CallbackQuery):
    subchoice = callback_query.data
    await callback_query.answer()
    if subchoice == "news_last":
        await callback_query.message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Æ–§–£:")
        await callback_query.message.answer(student_news)
    if subchoice == "news_last_mehmath":
        await callback_query.message.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ú–µ—Ö–º–∞—Ç–∞:")
        await callback_query.message.answer(student_news_mehmath)
    elif subchoice == "news_vk_url":
        await callback_query.message.answer("–ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π:")
        await callback_query.message.answer('<a href="https://sfedu.ru/press-center/newspage/1">''üòΩüëâ—Ç—ã–∫üëà''</a>',parse_mode="HTML")

@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "waiting_for_teacher_fio")
async def process_teacher_fio(message: types.Message):
    try:
        user_id = message.from_user.id
        fio = message.text
        user_data[user_id]["step"] = "waiting_for_teacher_schedule"
        await message.answer(f"–í–∞—à —É—á–∏—Ç–µ–ª—å:", reply_markup=get_teacher_keyboard(fio))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –§–ò–û —É—á–∏—Ç–µ–ª—è: {e}")
        await message.answer("–£ –≤–∞—à–µ–≥–æ —É—á–∏—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.", reply_markup=ReplyKeyboardRemove)

@dp.message(lambda message: user_data.get(message.from_user.id, {}).get("step") == "waiting_for_teacher_schedule")
async def process_teacher_schedule(message: types.Message):
    try:
        user_id = message.from_user.id
        fio = message.text
        user_data[user_id]["step"] = None

        schedule_text = f"{get_teacher_schedule(fio, 'week')}"
        start_index = schedule_text.find("{")
        end_index = schedule_text.rfind("}") + 1

        schedule_data = ast.literal_eval(schedule_text[start_index:end_index])
        await message.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—á–∏—Ç–µ–ª—è:")
        if format_schedule(schedule_data):
            await message.answer(f"{format_schedule(schedule_data)}", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—á–∏—Ç–µ–ª—è: {e}")
        await message.answer("–£ –≤–∞—à–µ–≥–æ —É—á–∏—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π.",  reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def handle_actions(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ: {message.text}")

        user = get_user("tg", user_id)
        if user is None:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
            return

        if user["is_abitur"] == 1:
            if message.text == "–ö–∞—Ñ–µ–¥—Ä—ã":
                await message.answer("–ö–∞—Ñ–µ–¥—Ä—ã...")
            elif message.text == "–ë–∞–∫–∞–ª–∞–≤—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
                user_data[user_id]["step"] = "–±–∞–∫–∞–ª–∞–≤—Ä"
                await message.answer("–ë–∞–∫–∞–ª–∞–≤—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", reply_markup=direction_keyboard)
            elif message.text == "–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
                user_data[user_id]["step"] = "–º–∞–≥–∏—Å—Ç—Ä–∞–ª—å"
                await message.answer("–ú–∞–≥–∏—Å—Ç—Ä–∞–ª—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=direction_keyboard)
            elif message.text == "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
                user_data[user_id] = "–∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞"
                await message.answer("–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=direction_keyboard)
        else:
            if message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_inline_keyboard(message.text))
            elif message.text == "–°–æ–±—ã—Ç–∏–µ":
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å", reply_markup=get_inline_keyboard(message.text))
            elif message.text == "–ò–Ω—Ñ–∞ –ø—Ä–æ –ø—Ä–µ–ø–æ–¥–∞":
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É—á–∏—Ç–µ–ª—è:")
                user_data[user_id] = {"step": "waiting_for_teacher_fio"}
                return
            elif message.text == "–ù–∞–≤–∏–≥–∞—Ü–∏—è":
                await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—è.")
            elif message.text == "–£—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã":
                await message.answer("–ó–¥–µ—Å—å —É—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.")
            else:
                await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–µ–π—Å—Ç–≤–∏–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())