from sys import flags
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from functions import db_funcs, schedule
from functions.db_funcs import get_user, create_user
from functions.schedule import get_groups, get_schedule
import ast

user_states = {}


def format_schedule(schedule):
    result = []
    for day, lessons in schedule.items():
        result.append(f"üìÖ –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {day}")
        for lesson in lessons:
            result.append(
                f"  üïí –í—Ä–µ–º—è: {lesson['start_time']} - {lesson['end_time']}\n"
                f"  üìö –ü—Ä–µ–¥–º–µ—Ç: {lesson['title']}\n"
                f"  üè´ –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
                f"  üë©‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {lesson['teacher']}\n"
            )
        result.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –¥–Ω–µ–π
    return "\n".join(result)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
vk_session = vk_api.VkApi(
    token='vk1.a.aGFNn-rcVNqmHl_jtBbqXJMFHfDpp29wJzjvsk307yJ4a4eLD6zmVF8c01XjsJuwggDpF6-OGK6FV82zcXXFLyyA8I0jksu_D3A1WzmrMFU-CUP740rjOO85tI29z9SoeL861nRSsh5TxEMIci4GhAxHi3XuRP6q5vkPdXgAW75JhDMrwyro7DVtGWTNSPPWmSFMW5U8GCGTLeSXX0MS-w')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
vk = vk_session.get_api()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LongPoll
group_id = 229563001  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
longpoll = VkBotLongPoll(vk_session, group_id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(buttons, inline=False, one_time=False):
    keyboard = vk_api.keyboard.VkKeyboard(one_time=one_time, inline=inline)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    for i, button in enumerate(buttons):
        if i % 2 == 0 and i != 0:  # –ü–æ—Å–ª–µ –∫–∞–∂–¥—ã—Ö 4 –∫–Ω–æ–ø–æ–∫ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            keyboard.add_line()
        keyboard.add_button(button, color=VkKeyboardColor.PRIMARY)
    return keyboard.get_keyboard()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(user_id, message, keyboard=None):
    vk.messages.send(
        user_id=user_id,
        message=message,
        random_id=get_random_id(),
        keyboard=keyboard
    )


def register(user_id, text):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id not in user_states:
        user_states[user_id] = {}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç)
    if text == '–°—Ç—É–¥–µ–Ω—Ç':
        user_states[user_id] = {'step': 'ask_name', 'role': 'student'}
        send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

    elif text == '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç':
        user_states[user_id] = {'step': 'ask_name', 'role': 'applicant'}
        send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    elif user_states[user_id].get('step') == 'ask_name' and user_states[user_id].get('role') == 'student':
        user_states[user_id]['name'] = text
        user_states[user_id]['step'] = 'ask_course'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫—É—Ä—Å–∞

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
        keyboard = create_keyboard([
            "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 1 –∫—É—Ä—Å", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 2 –∫—É—Ä—Å", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 3 –∫—É—Ä—Å",
            "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 4 –∫—É—Ä—Å", "–ë–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç, 5 –∫—É—Ä—Å", "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, 1 –∫—É—Ä—Å",
            "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞, 2 –∫—É—Ä—Å", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞, 1 –∫—É—Ä—Å", "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞, 2 –∫—É—Ä—Å"
        ])
        send_message(user_id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:', keyboard)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    elif user_states[user_id].get('step') == 'ask_course' and user_states[user_id].get('role') == 'student':
        user_states[user_id]['course'] = text
        user_states[user_id]['step'] = 'ask_group'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≥—Ä—É–ø–ø—ã
        group_course = get_groups(text)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_groups –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
        if group_course:
            keyboard = create_keyboard(group_course)
            send_message(user_id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:', keyboard)
        else:
            send_message(user_id, '–ì—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
            user_states[user_id] = {}  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    elif user_states[user_id].get('step') == 'ask_group' and user_states[user_id].get('role') == 'student':
        user_states[user_id]['group'] = text
        name = user_states[user_id]['name']
        course = user_states[user_id]['course']
        group = user_states[user_id]['group']
        send_message(user_id, f'–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: –ò–º—è - {name}, –∫—É—Ä—Å - {course}, –≥—Ä—É–ø–ø–∞ - {group}.')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        create_user("vk", user_id, name, course, group)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        user_states[user_id] = {}
        show_menu_student(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
    elif user_states[user_id].get('step') == 'ask_name' and user_states[user_id].get('role') == 'applicant':
        user_states[user_id]['name'] = text
        name = user_states[user_id]['name']
        send_message(user_id, f'–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –∏–º—è: {name}.')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        create_user("vk", user_id, name)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞
        user_states[user_id] = {}
        show_menu_applicant(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    else:
        send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.')


def show_menu_student(user_id):
    keyboard = create_keyboard(['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–°–æ–±—ã—Ç–∏—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö', '–ù–∞–≤–∏–≥–∞—Ü–∏—è', '–£—á–µ–±–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'])
    send_message(user_id, '–ú–µ–Ω—é –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:', keyboard)
    for event in longpoll.listen():
        if event.type == VkBotEventType.MESSAGE_NEW:
            user_id = event.obj.message['from_id']
            text = event.obj.message['text']

            if text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
                schedule_vk_bot(user_id)

            elif text == "–ü—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–∏":
                pass


def show_menu_applicant(user_id):
    keyboard = create_keyboard(['–£—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è', '–§–∏–Ω–∞–Ω—Å—ã', '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'])
    send_message(user_id, '–ú–µ–Ω—é –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤:', keyboard)


def schedule_vk_bot(user_id):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = get_user("vk", user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –∏ –≥—Ä—É–ø–ø–µ
    if not user or 'course' not in user or 'group' not in user:
        send_message(user_id, '–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.')
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = create_keyboard(['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '–ù–µ–¥–µ–ª—è', '–ú–µ–Ω—é'])
    send_message(user_id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', keyboard)
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        for event in longpoll.listen():
            if event.type == VkBotEventType.MESSAGE_NEW:
                user_id = event.obj.message['from_id']
                text = event.obj.message['text']

                if text == '–°–µ–≥–æ–¥–Ω—è':
                    schedule_1 = str(get_schedule(user['course'], user['group'], 'today'))
                    start_index = schedule_1.find("{")
                    end_index = schedule_1.rfind("}") + 1
                    schedule_data = ast.literal_eval(schedule_1[start_index:end_index])

                    if schedule_1 == {}:
                        send_message(user_id, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
                    else:
                        send_message(user_id, format_schedule(schedule_data))
                    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

                elif text == '–ó–∞–≤—Ç—Ä–∞':
                    schedule_1 = str(get_schedule(user['course'], user['group'], 'tomorrow'))
                    start_index = schedule_1.find("{")
                    end_index = schedule_1.rfind("}") + 1
                    schedule_data = ast.literal_eval(schedule_1[start_index:end_index])

                    if schedule_1 == {}:
                        send_message(user_id, '–ù–∞ –∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
                    else:
                        send_message(user_id, format_schedule(schedule_data))

                elif text == '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞':
                    schedule_1 = str(get_schedule(user['course'], user['group'], 'atomorrow'))
                    start_index = schedule_1.find("{")
                    end_index = schedule_1.rfind("}") + 1
                    schedule_data = ast.literal_eval(schedule_1[start_index:end_index])

                    if schedule_1 == {}:
                        send_message(user_id, '–ù–∞ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
                    else:
                        send_message(user_id, format_schedule(schedule_data))

                elif text == '–ù–µ–¥–µ–ª—è':
                    schedule_1 = str(get_schedule(user['course'], user['group'], 'week'))
                    start_index = schedule_1.find("{")
                    end_index = schedule_1.rfind("}") + 1
                    schedule_data = ast.literal_eval(schedule_1[start_index:end_index])

                    if schedule_1 == {}:
                        send_message(user_id, '–ù–∞ –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.')
                    else:
                        send_message(user_id, format_schedule(schedule_data))

                elif text.lower() == '/menu' or text.lower() == 'menu' or text.lower() == '–º–µ–Ω—é':
                    show_menu_student(user_id)

                else:
                    send_message(user_id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
    except Exception as e:
        print(e)
        show_menu_student(user_id)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        user_id = event.obj.message['from_id']
        text = event.obj.message['text']

        if text.lower() == '/start' or text.lower() == 'start' or text.lower() == '—Å—Ç–∞—Ä—Ç' or text.lower() == '–Ω–∞—á–∞—Ç—å':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å" (–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
            if get_user("vk", user_id):
                keyboard = create_keyboard(['–î–∞', '–ù–µ—Ç'], inline=False)
                send_message(user_id, '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–Ω–æ–≤–æ?', keyboard)
            else:
                keyboard = create_keyboard(['–°—Ç—É–¥–µ–Ω—Ç', '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'], one_time=True)
                send_message(user_id, '–í—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç?', keyboard)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ "–î–∞" –∏–ª–∏ "–ù–µ—Ç" –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        elif text.lower() == '–¥–∞':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–î–∞", –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
            keyboard = create_keyboard(['–°—Ç—É–¥–µ–Ω—Ç', '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç'], one_time=True)
            send_message(user_id, '–í—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç?', keyboard)

        elif text.lower() == '–Ω–µ—Ç':
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–µ—Ç", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            user_data = get_user("vk", user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_data is None:
                send_message(user_id, '–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.')
            elif user_data.get('is_abitur', False):  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç
                show_menu_applicant(user_id)
            else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—Ç—É–¥–µ–Ω—Ç
                show_menu_student(user_id)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ (—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç)
        elif text == '–°—Ç—É–¥–µ–Ω—Ç':
            register(user_id, text)

        elif text == '–ê–±–∏—Ç—É—Ä–∏–µ–Ω—Ç':
            register(user_id, text)

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        elif user_id in user_states:
            register(user_id, text)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
        elif text.lower() == '/menu' or text.lower() == 'menu' or text.lower() == '–º–µ–Ω—é':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
            user_data = get_user("vk", user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_data is None:
                send_message(user_id, '–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.')
            elif user_data['is_abitur']:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç
                show_menu_applicant(user_id)
            else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Å—Ç—É–¥–µ–Ω—Ç
                show_menu_student(user_id)
